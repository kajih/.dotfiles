# Don't ask for confirmations
assume_yes = true

# Disable specific steps - same options as the command line flag
disable = ["containers"]

# Ignore failures for these steps
ignore_failures = ["powershell", "git_repos"]

# Run specific steps - same options as the command line flag
#only = ["system", "emacs"]

# Do not ask to retry failed steps (default: false)
no_retry = true

# Run `sudo -v` to cache credentials at the start of the run; this avoids a
# blocking password prompt in the middle of a possibly-unattended run.
pre_sudo = true

# Run inside tmux
run_in_tmux = true

# List of remote machines with Topgrade installed on them
remote_topgrades = ["kajih@naglfar.lan", "kajih@bastard.lan", "update@kajih.xyz", "kajih@gungnir.lan"]

# Arguments to pass SSH when upgrading remote systems
ssh_arguments = "-o ConnectTimeout=2"

# Path to Topgrade executable on remote machines
remote_topgrade_path = ".cargo/bin/topgrade"

# Arguments to pass tmux when pulling Repositories
tmux_arguments = "-S /tmp/tmux-1000/default"

# Do not set the terminal title
set_title = true

# Display the time in step titles
display_time = true

# Cleanup temporary or old files
cleanup = true

# Skip sending a notification at the end of a run
skip_notify = true

[git]
max_concurrency = 5
repos = [
    "~/src/cpp/github/neovim",
    "~/src/rust/github/rust-analyzer"
]

# Don't pull the predefined git repos
pull_predefined = true

# Arguments to pass Git when pulling Repositories
arguments = "--rebase --autostash"

[composer]
#self_update = true

# Commands to run before anything
[pre_commands]
#"Emacs Snapshot" = "rm -rf ~/.emacs.d/elpa.bak && cp -rl ~/.emacs.d/elpa ~/.emacs.d/elpa.bak"
# srcdir_nvim = "mkdir -p ~/src/cpp/github/neovim"
# srcdir_rust = "mkdir -p ~/src/rust/github"
# cleanup_nvim_build = "cd ~/src/cpp/github/neovim && sudo make distclean"
# homedir = "cd"

# Custom commands
[commands]
#"Python Environment" = "~/dev/.env/bin/pip install -i https://pypi.python.org/simple -U --upgrade-strategy eager jupyter"
# neobuild = "cd ~/src/cpp/github/neovim && sudo make distclean && make -j16 CMAKE_BUILD_TYPE=RelWithDebInfo && sudo make install"
homedir = "cd"
nvim-lazy = "nvim --headless -c 'Lazy! sync' -c 'qa'"

[brew]
#greedy_cask = true
#autoremove = true

[linux]
# Arch Package Manager to use. Allowed values: autodetect, trizen, aura, paru, yay, pikaur, pacman, pamac.
#arch_package_manager = "pacman"
# Arguments to pass yay (or paru) when updating packages
#yay_arguments = "--nodevel"
#aura_aur_arguments = "-kx"
#aura_pacman_arguments = ""
#show_arch_news = true
#trizen_arguments = "--devel"
#pikaur_arguments = ""
#pamac_arguments = "--no-devel"
#enable_tlmgr = true
#emerge_sync_flags = "-q"
#emerge_update_flags = "-uDNa --with-bdeps=y world"
#redhat_distro_sync = false
#rpm_ostree = false

[windows]
# Manually select Windows updates
accept_all_updates = true
open_remotes_in_new_terminal = true

# Causes Topgrade to rename itself during the run to allow package managers
# to upgrade it. Use this only if you installed Topgrade by using a package
# manager such as Scoop or Cargo
self_rename = true

[npm]
# Use sudo if the NPM directory isn't owned by the current user
use_sudo = true

[firmware]
# Offer to update firmware; if false just check for and display available updates
upgrade = true

[flatpak]
# Use sudo for updating the system-wide installation
use_sudo = true

[distrobox]
#use_root = false
#containers = ["archlinux-latest"]
